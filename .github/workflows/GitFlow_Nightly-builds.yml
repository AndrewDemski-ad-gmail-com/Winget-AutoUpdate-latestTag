# Step 1: Checkout the develop branch for nightly builds
- name: Checkout code
  uses: actions/checkout@v4.2.2
  with:
    fetch-depth: 0
    # Always checkout develop for nightly builds
    ref: develop

# Vérifier la branche active après le checkout
- name: Vérifier la branche active après checkout
  run: echo "Branche active après checkout: $(git branch --show-current)"

# Step 2: Verify if a new build is required by checking for merged PRs since last tag
- name: Check for merged PRs since last tag
  id: check_prs
  shell: powershell
  run: |
    # Find the latest tag of any type
    $LATEST_TAG = git tag --sort=-v:refname | Select-Object -First 1
    Write-Host "Latest tag: $LATEST_TAG"

    # Get merged PRs since last tag using Git directly
    $MERGED_PRS = git log --merges --grep="Merge pull request" --oneline "$LATEST_TAG..develop"

    # If merged PRs exist, set BUILD_NEEDED and determine release type
    if ($MERGED_PRS) {
      Write-Host "Found PRs merged to develop since latest tag:"
      Write-Host $MERGED_PRS
      echo "BUILD_NEEDED=true" >> $env:GITHUB_OUTPUT

      # Determine release type
      if ($LATEST_TAG -like "*-*") {
        $RELEASE_TYPE = "prerelease"
      }
      else {
        $RELEASE_TYPE = "preminor"
      }
      echo "RELEASE_TYPE=$RELEASE_TYPE" >> $env:GITHUB_OUTPUT
      Write-Host "Next release: $RELEASE_TYPE"
    } else {
      # If no merged PRs, skip building
      Write-Host "No PRs merged to develop since latest tag. Skipping build."
      echo "BUILD_NEEDED=false" >> $env:GITHUB_OUTPUT
    }

# Vérifier la branche active après la vérification des PRs
- name: Vérifier la branche active après la vérification des PRs
  run: echo "Branche active après la vérification des PRs: $(git branch --show-current)"

# Step 3: Generate new semantic version number
- name: Auto Increment Semver Action
  uses: MCKanpolat/auto-semver-action@5003b8d37f4b03d95f15303ea10242cbf7c13141 # 2
  if: steps.check_prs.outputs.BUILD_NEEDED == 'true'
  id: versioning
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
    incrementPerCommit: true
    releaseType: ${{ steps.check_prs.outputs.RELEASE_TYPE }}

# Vérifier la branche active après l'incrémentation de la version
- name: Vérifier la branche active après l'incrémentation de la version
  run: echo "Branche active après l'incrémentation de la version: $(git branch --show-current)"

# Step 4: Format version numbers for different purposes (SemVer, MSI version)
- name: Format Semver (and MSI version)
  if: steps.check_prs.outputs.BUILD_NEEDED == 'true'
  id: format_version
  shell: powershell
  run: |
    # Get version from previous step
    $NextSemver = "${{ steps.versioning.outputs.version }}"

    # Create MSI-compatible version (x.y.z.build)
    $commit_count = (git rev-list --count HEAD)
    $commit_count_mod = $commit_count % 65535  # MSI has a version limit
    $MsiBase = $NextSemver.Split("-")[0]  # Remove prerelease segment
    $MsiVersion = "$MsiBase.$commit_count_mod"

    # Format the release name
    $ReleaseName = "WAU $NextSemver [Nightly Build]"

    # Output all version information
    echo "MSI version: $MsiVersion"
    echo "Semver created: $NextSemver"
    echo "Release name: $ReleaseName"
    echo "MsiVersion=$MsiVersion" >> $env:GITHUB_OUTPUT
    echo "NextSemVer=$NextSemver" >> $env:GITHUB_OUTPUT
    echo "ReleaseName=$ReleaseName" >> $env:GITHUB_OUTPUT

# Vérifier la branche active après le formatage de la version
- name: Vérifier la branche active après le formatage de la version
  run: echo "Branche active après le formatage de la version: $(git branch --show-current)"

# Step 5: Build the project and generate artifacts
- name: Build project
  if: steps.check_prs.outputs.BUILD_NEEDED == 'true'
  id: build_project
  shell: powershell
  run: |
    # Download and install Microsoft Deployment Toolkit
    echo "### Get MDT from Microsoft ###"
    wget https://download.microsoft.com/download/3/3/9/339BE62D-B4B8-4956-B58D-73C4685FC492/MicrosoftDeploymentToolkit_x64.msi -UseBasicParsing -OutFile .\MicrosoftDeploymentToolkit_x64.msi
    Start-Process .\MicrosoftDeploymentToolkit_x64.msi -ArgumentList "/quiet /norestart" -Wait

    # Extract ServiceUI for elevated notifications
    echo "### Copy ServiceUI.exe x64 to 'Sources\Winget-AutoUpdate' folder ###"
    Copy-Item -Path "C:\Program Files\Microsoft Deployment Toolkit\Templates\Distribution\Tools\x64\ServiceUI.exe" -Destination ".\Sources\Winget-AutoUpdate\ServiceUI.exe" -Force
    Get-Item .\Sources\Winget-AutoUpdate\*

    # Install WiX tools for MSI creation
    echo "### Install WiX ###"
    dotnet new console
    dotnet tool install --global wix --version 5.0.1
    wix extension add WixToolset.UI.wixext/5.0.1 -g
    wix extension add WixToolset.Util.wixext/5.0.1 -g

    # Build MSI package with version information
    echo "### Create WAU MSI ###"
    cd .\Sources\Wix\
    wix build -src build.wxs -ext WixToolset.Util.wixext -ext WixToolset.UI.wixext -out ..\..\WAU.msi -arch x64 -d Version=${{ steps.format_version.outputs.MsiVersion }} -d NextSemVer=${{ steps.format_version.outputs.NextSemVer }}
    cd ..\..
    Get-Item .\WAU.msi

    # Calculate MSI file hash for verification
    echo "### Get MSI file SHA ###"
    $MsiSHA = (Get-FileHash .\WAU.msi).hash
    echo " - WAU.msi SHA256: $MsiSHA"
    echo "msi_sha=$MsiSHA" >> $env:GITHUB_OUTPUT

    # Package ADMX policy templates
    echo "### Zip ADMX ###"
    Compress-Archive -Path .\Sources\Policies\ADMX -DestinationPath .\WAU_ADMX.zip -Force
    Get-Item .\*.zip

    # Calculate ADMX package hash for verification
    echo "### Get ADMX zip SHA ###"
    $ADMXSHA = (Get-FileHash .\WAU_ADMX.zip).hash
    echo " - WAU_ADMX.zip SHA256: $ADMXSHA"
    echo "admx_sha=$ADMXSHA" >> $env:GITHUB_OUTPUT

    # Create installation counter file for tracking installs
    echo "### Create install counter file ###"
    echo "Install counter file." > WAU_InstallCounter

# Vérifier la branche active après la construction du projet
- name: Vérifier la branche active après la construction du projet
  run: echo "Branche active après la construction du projet: $(git branch --show-current)"